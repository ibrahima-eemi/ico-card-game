generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// ðŸ”¹ **ModÃ¨le `User`** : ReprÃ©sente un utilisateur avec ses relations
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String
  password  String
  createdAt DateTime @default(now())

  // Relations
  players     Player[]
  hostedRooms Room[]     @relation("HostRooms") // âœ… L'utilisateur peut hÃ©berger plusieurs salles
  sessions    Session? // âœ… Un utilisateur peut avoir une session
  memberRooms UserRoom[] // âœ… Relation Many-to-Many via une table pivot
}

/// ðŸ”¹ **ModÃ¨le `Room`** : DÃ©finit les salles de jeu et les relations avec les joueurs
model Room {
  id        String     @id @default(uuid())
  sessionId String?    @unique
  hostId    String
  status    RoomStatus @default(WAITING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  players Player[]
  host    User       @relation("HostRooms", fields: [hostId], references: [id], onDelete: Cascade)
  members UserRoom[] // âœ… Relation Many-to-Many via une table pivot
}

/// ðŸ”¹ **Table pivot `UserRoom`** pour gÃ©rer `User` <-> `Room`
model UserRoom {
  userId String
  roomId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId]) // âœ… ClÃ© primaire composite
}

/// ðŸ”¹ **ModÃ¨le `Player`** : Associe un utilisateur Ã  une salle avec un rÃ´le spÃ©cifique
model Player {
  id        String   @id @default(uuid())
  name      String
  role      String
  roomId    String
  userId    String
  isReady   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ðŸ”¹ **ModÃ¨le `Session`** : GÃ¨re l'authentification des utilisateurs
model Session {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ðŸ”¹ **ModÃ¨le `Card`** : DÃ©finit les cartes avec un effet JSON
model Card {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String
  effect      Json
  createdAt   DateTime @default(now())
}

/// ðŸ”¹ **Enum `RoomStatus`** : DÃ©finition des statuts possibles pour une salle
enum RoomStatus {
  WAITING
  IN_PROGRESS
  FINISHED
}
