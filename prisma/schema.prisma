// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// PostgreSQL Connection
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// ðŸ”¹ ModÃ¨le `User`
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String
  password  String
  createdAt DateTime @default(now())

  // Relations
  players     Player[]
  hostedRooms Room[]     @relation("HostRooms") // Un utilisateur peut hÃ©berger plusieurs salles
  sessions    Session? // Un utilisateur peut avoir une session
  memberRooms UserRoom[] // Many-to-Many via table pivot
}

/// ðŸ”¹ ModÃ¨le `Room`
model Room {
  id        String     @id @default(uuid())
  sessionId String?    @unique
  hostId    String
  status    RoomStatus @default(WAITING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  players     Player[]
  host        User          @relation("HostRooms", fields: [hostId], references: [id], onDelete: Cascade)
  members     UserRoom[]
  playerRooms PlayerRooms[] @relation("RoomToPlayerRooms")
}

/// ðŸ”¹ Table pivot `UserRoom` (User <-> Room)
model UserRoom {
  userId String
  roomId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
}

/// ðŸ”¹ ModÃ¨le `Player`
model Player {
  id        String   @id @default(uuid())
  name      String
  role      String
  roomId    String
  userId    String
  isReady   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ðŸ”¹ ModÃ¨le `Session`
model Session {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ðŸ”¹ ModÃ¨le `Card`
model Card {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String
  effect      Json
  createdAt   DateTime @default(now())
}

/// ðŸ”¹ ModÃ¨le `BugReport`
model BugReport {
  id          BigInt   @id @default(autoincrement())
  user        String?  @db.VarChar
  email       String?  @db.VarChar
  subject     String?  @db.VarChar(50)
  description String?
  priority    String?  @db.VarChar
  created_at  DateTime @default(now()) @db.Timestamptz(6)
}

/// ðŸ”¹ ModÃ¨le `User_Admin`
model User_Admin {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  profile_picture String?
  status          String   @default("active")
  created_at      DateTime @default(now())
}

/// ðŸ”¹ Table pivot `PlayerRooms` (Player <-> Room custom)
model PlayerRooms {
  A    String
  B    String
  Room Room   @relation("RoomToPlayerRooms", fields: [A], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_PlayerRooms_AB_pkey")
  @@index([B], map: "_PlayerRooms_B_index")
  @@map("_PlayerRooms")
}

/// ðŸ”¹ Enum `RoomStatus`
enum RoomStatus {
  WAITING
  IN_PROGRESS
  FINISHED
}
