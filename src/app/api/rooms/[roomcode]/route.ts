import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { z } from "zod"; // ‚úÖ Ajout pour valider les donn√©es entrantes

const prisma = new PrismaClient();

/**
 * üìå Sch√©ma de validation pour les mises √† jour de room
 */
const updateRoomSchema = z.object({
  name: z.string().optional(),
  status: z.enum(["waiting", "in-progress", "finished"]).optional(),
});

/**
 * üîç GET : R√©cup√©rer une room sp√©cifique
 */
export async function GET(_: Request, { params }: { params: { roomcode: string } }) {
  const { roomcode } = params;

  if (!roomcode) {
    return NextResponse.json({ error: "‚ùå Room code manquant." }, { status: 400 });
  }

  try {
    const room = await prisma.room.findUnique({
      where: { id: roomcode },
      include: { players: true }, // ‚úÖ V√©rifie que `players` est bien d√©fini dans le mod√®le Prisma
    });

    if (!room) {
      return NextResponse.json({ error: "‚ùå Room introuvable." }, { status: 404 });
    }

    return NextResponse.json(room, { status: 200 });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration de la room :", error);
    return NextResponse.json({ error: "Erreur interne du serveur." }, { status: 500 });
  } finally {
    await prisma.$disconnect(); // ‚úÖ Ferme la connexion √† Prisma proprement
  }
}

/**
 * ‚úèÔ∏è PATCH : Mettre √† jour une room
 */
export async function PATCH(req: Request, { params }: { params: { roomcode: string } }) {
  const { roomcode } = params;

  if (!roomcode) {
    return NextResponse.json({ error: "‚ùå Room code manquant." }, { status: 400 });
  }

  try {
    const body = await req.json();
    const parsedData = updateRoomSchema.safeParse(body);

    if (!parsedData.success) {
      return NextResponse.json({ error: "‚ùå Donn√©es invalides." }, { status: 400 });
    }

    const existingRoom = await prisma.room.findUnique({ where: { id: roomcode } });

    if (!existingRoom) {
      return NextResponse.json({ error: "‚ùå Room introuvable." }, { status: 404 });
    }

    const updatedRoom = await prisma.room.update({
      where: { id: roomcode },
      data: {
        ...parsedData.data,
        status: parsedData.data.status?.replace("IN-PROGRESS", "IN_PROGRESS").toUpperCase() as "WAITING" | "IN_PROGRESS" | "FINISHED",
      },
    });

    return NextResponse.json(updatedRoom, { status: 200 });
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour de la room :", error);
    return NextResponse.json({ error: "Erreur interne du serveur." }, { status: 500 });
  } finally {
    await prisma.$disconnect(); // ‚úÖ Ferme la connexion apr√®s l'op√©ration
  }
}

/**
 * üóëÔ∏è DELETE : Supprimer une room
 */
export async function DELETE(_: Request, { params }: { params: { roomcode: string } }) {
  const { roomcode } = params;

  if (!roomcode) {
    return NextResponse.json({ error: "‚ùå Room code manquant." }, { status: 400 });
  }

  try {
    const existingRoom = await prisma.room.findUnique({ where: { id: roomcode } });

    if (!existingRoom) {
      return NextResponse.json({ error: "‚ùå Room introuvable." }, { status: 404 });
    }

    await prisma.room.delete({
      where: { id: roomcode },
    });

    return NextResponse.json({ message: "‚úÖ Room supprim√©e avec succ√®s." }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de la room :", error);

    if ((error as { code: string }).code === "P2003") {
      return NextResponse.json({ error: "‚ùå Impossible de supprimer la room car elle est li√©e √† d'autres donn√©es." }, { status: 409 });
    }

    return NextResponse.json({ error: "Erreur interne du serveur." }, { status: 500 });
  } finally {
    await prisma.$disconnect(); // ‚úÖ Fermeture propre de Prisma
  }
}
